#include <fcntl.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <stdio.h>
#include <netinet/in.h>
#include <resolv.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <google/protobuf/io/zero_copy_stream_impl.h>
#include "message.pb.h"
#include <iostream>
#include <google/protobuf/message.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/zero_copy_stream_impl.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>

#define SIZE 1000


using namespace google::protobuf::io;

using namespace std;

int index();
char* search(char*,int);

int main(int argv, char** argc){

info data ;
data.set_ip_addr(0);
data.set_query_id(10);
data.set_index(1);
data.set_worker_name("TST");
data.set_query("this is it");
data.set_path("/home/data.txt");

int siz = data.ByteSizeLong()+4;
char *pkt = new char [siz];
google::protobuf::io::ArrayOutputStream aos(pkt,siz);
CodedOutputStream *coded_output = new CodedOutputStream(&aos);
coded_output->WriteVarint32(data.ByteSizeLong());
data.SerializeToCodedStream(coded_output);

        int host_port= 9015;
        char host_name[]="172.20.3.153";

        struct sockaddr_in my_addr;

        char buffer[1024];
        char server_message[1024]={0};
        int bytecount;
        int buffer_len=0;

        int hsock;
        int * p_int;
        int err;

        hsock = socket(AF_INET, SOCK_STREAM, 0);
        if(hsock == -1){
                printf("Error initializing socket %d\n",errno);
                goto FINISH;
        }

        p_int = (int*)malloc(sizeof(int));
        *p_int = 1;

        if( (setsockopt(hsock, SOL_SOCKET, SO_REUSEADDR, (char*)p_int, sizeof(int)) == -1 )||
                (setsockopt(hsock, SOL_SOCKET, SO_KEEPALIVE, (char*)p_int, sizeof(int)) == -1 ) ){
                printf("Error setting options %d\n",errno);
                free(p_int);
                goto FINISH;
        }
        free(p_int);

        my_addr.sin_family = AF_INET ;
        my_addr.sin_port = htons(host_port);

        memset(&(my_addr.sin_zero), 0, 8);
        my_addr.sin_addr.s_addr = inet_addr(host_name);
        if( connect( hsock, (struct sockaddr*)&my_addr, sizeof(my_addr)) == -1 ){
                if((err = errno) != EINPROGRESS){
                        fprintf(stderr, "Error connecting socket %d\n", errno);
                        goto FINISH;
                }
        }


        while( (bytecount = recv(hsock , server_message , SIZE, 0)) > 0 )
        {
             char client_message[SIZE] = "NULL";

            if(strcmp(server_message, "shutdown")==0)
            {
                strcpy(client_message, "Shutting down client\n");
                if( (bytecount=send(hsock, client_message ,SIZE,0))== -1 ) 
                {
                        cerr << "Error sending shutdown message\n "  << endl;
                        goto FINISH;
                }
                cout << client_message <<endl;
                return 0;
            }

            else if(strcmp(server_message, "make index")==0)
            {
               if (index()==1)
              {
                strcpy(client_message, "Indexing successful");
                send(hsock,client_message ,SIZE,0);
              }
              else
              {
                strcpy(client_message, "Indexing unsuccessful");
                send(hsock, client_message,SIZE,0);
              }
              cout << client_message <<endl;
            }

            else if(strcmp(server_message,"query")==0)
            {
                int size=0;
                char* path= search(server_message,size); 
                strcpy(client_message, "Query unsuccessful");
                
                if( (bytecount=send(hsock,(void*)pkt,siz,0))== -1 ) 
                {
                        cerr << "Error sending data\n " << endl;   
                }
               // cout << path <<endl;
            }

            else
            {
                strcpy(client_message, "Invalid command");
                send(hsock, client_message,SIZE,0);
                cout << client_message <<endl;
            }
        }
        
        //delete pkt;
FINISH:
        close(hsock);
}

int index()
{
    int index =1;
    if(index ==1)
    {
        return 1;
    } 
    else 
        return 0;   
}

char* search(char* query,int siz)
{
    /*info data ;
    data.set_ip_addr(0);
    data.set_query_id(10);
    data.set_index(1);
    data.set_worker_name("TST");
    data.set_query("this is it");
    data.set_path("/home/data.txt");

    siz = data.ByteSizeLong()+4;
    char *pkt = new char [siz];
    google::protobuf::io::ArrayOutputStream aos(pkt,siz);
    CodedOutputStream *coded_output = new CodedOutputStream(&aos);
    coded_output->WriteVarint32(data.ByteSizeLong());
    data.SerializeToCodedStream(coded_output);*/
        char* path = new char[100];
        strcpy(path, "home/path.txt");

return path;
    
}
